name: CI/CD Desktop App

on:
  push:
    branches:
      - master

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
  S3_BUCKET: s3://noovolari-leapp-website-distribution-test
  CERTIFICATE_OSX_P12: ${{ secrets.CERTIFICATE_OSX_P12 }}
  CERTIFICATE_APPLICATION_OSX_P12: ${{ secrets.CERTIFICATE_APPLICATION_OSX_P12 }}
  DECODE_PASSWORD: ${{ secrets.DECODE_PASSWORD }}

jobs:
  tag-validation:
    outputs:
      validator: ${{ steps.validator.outputs.VALID_TAG }}
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: master

      - name: Check Tag Validity
        id: validator
        run: |
          git fetch
          LOG=$(git log --format="%H" -n 1)
          echo "LOG: $LOG"
          TAG=$(git tag --contains $LOG)
          echo "TAG: $TAG"
          REGEX="^v[0-9]+\.[0-9]+.[0-9]+"
          if [[ $TAG =~ $REGEX ]]; then IS_VALID_TAG=1; else IS_VALID_TAG=0; fi;
          echo "::set-output name=VALID_TAG::$IS_VALID_TAG"

      - name: If valid tag set
        if: steps.validator.outputs.VALID_TAG == 1
        run: |
          echo "Valid Tag Found - Building Desktop App..."

      - name: If not valid tag set
        if: steps.validator.outputs.VALID_TAG != 1
        run: |
          echo "Not a Desktop App Release Tag or Invalid one Found - Exiting..."

  build-win:
      runs-on: macos-latest
      needs: [ tag-validation ]
      if: needs.tag-validation.outputs.validator == 1
      steps:
        - uses: actions/checkout@v3

        - name: Read exported variable
          run: |
            echo "OUTPUT: ${{ needs.first.outputs.var1 }}"

        - name: Build Win Desktop App
          run: |
            echo "tag: ${{ env.LAST_COMMIT_TAG }}"
            cd desktop-app
            npm install
            npm run release-win
            rm -Rf ./release/win-unpacked
            rm -Rf ./release/.cache
            rm -Rf ./release/builder-debug.yml
            rm -Rf ./release/builder-effective-config.yaml

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-west-1

        - name: Release Draft to S3
          run: |
            cd desktop-app
            TAG_VERSION=${GITHUB_REF#refs/*/}
            TAG_VERSION=${TAG_VERSION:1}
            aws s3 cp ./release/ "${{ env.S3_BUCKET }}/$TAG_VERSION/" --recursive

  build-linux:
    runs-on: ubuntu-latest
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - uses: actions/checkout@v3

      - name: Build Linux Desktop App
        run: |
          cd desktop-app
          npm install
          npm run release-linux
          rm -Rf ./release/linux-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Release Draft to S3
        run: |
          cd desktop-app
          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          aws s3 cp ./release/ "${{ env.S3_BUCKET }}/$TAG_VERSION/" --recursive

  build-macos-arm:
    runs-on: macos-latest
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3

      - name: Build macOS Desktop App
        env:
          APPLE_NOTARISATION_PASSWORD: ${{ secrets.APPLE_NOTARISATION_PASSWORD }}
        run: |
          cd desktop-app

          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          CERTIFICATE_APPLICATION_P12=certificate-application.p12

          echo "Recreate the certificate from the secure environment variable"
          echo "security create-keychain"

          echo "${{ env.CERTIFICATE_OSX_P12 }}" | base64 --decode > $CERTIFICATE_P12
          echo "${{ env.CERTIFICATE_APPLICATION_OSX_P12 }}" | base64 --decode > $CERTIFICATE_APPLICATION_P12

          security create-keychain -p jenkins $KEY_CHAIN
          echo "security list-keychains"
          security list-keychains -s login.keychain build.keychain
          echo "security default-keychain"
          security default-keychain -s $KEY_CHAIN
          echo "security unlock-keychain"
          security unlock-keychain -p jenkins $KEY_CHAIN
          echo "security import"
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P '${{ env.DECODE_PASSWORD }}' -T /usr/bin/codesign;
          security import $CERTIFICATE_APPLICATION_P12 -k $KEY_CHAIN -P '${{ env.DECODE_PASSWORD }}' -T /usr/bin/codesign;
          echo "security find-identity"
          security find-identity -v
          echo "security set-key-partition-list"
          security set-key-partition-list -S apple-tool:,apple:,codesign:, -s -k jenkins $KEY_CHAIN
          rm -fr *.p12

          npm install
          npm run set-target-arm64
          npm run release-mac
          rm -Rf ./release/mac
          rm -Rf ./release/mac-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml

          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          rm "./release/Leapp-$TAG_VERSION-arm64-mac.zip"
          rm "./release/Leapp-$TAG_VERSION-arm64-mac.zip.blockmap"
          zip "./release/Leapp-$TAG_VERSION-mac-arm64.zip" "./release/Leapp-$TAG_VERSION.dmg"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Release Draft to S3
        run: |
          cd desktop-app
          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          aws s3 cp ./release/ "${{ env.S3_BUCKET }}/$TAG_VERSION/" --recursive

  build-macos-x64:
    runs-on: macos-latest
    needs: [ tag-validation ]
    if: needs.tag-validation.outputs.validator == 1
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v3

      - name: Build macOS Desktop App
        env:
          APPLE_NOTARISATION_PASSWORD: ${{ secrets.APPLE_NOTARISATION_PASSWORD }}
        run: |
          cd desktop-app

          KEY_CHAIN=build.keychain
          CERTIFICATE_P12=certificate.p12
          CERTIFICATE_APPLICATION_P12=certificate-application.p12

          echo "Recreate the certificate from the secure environment variable"
          echo "security create-keychain"

          echo "${{ env.CERTIFICATE_OSX_P12 }}" | base64 --decode > $CERTIFICATE_P12
          echo "${{ env.CERTIFICATE_APPLICATION_OSX_P12 }}" | base64 --decode > $CERTIFICATE_APPLICATION_P12

          security create-keychain -p jenkins $KEY_CHAIN
          echo "security list-keychains"
          security list-keychains -s login.keychain build.keychain
          echo "security default-keychain"
          security default-keychain -s $KEY_CHAIN
          echo "security unlock-keychain"
          security unlock-keychain -p jenkins $KEY_CHAIN
          echo "security import"
          security import $CERTIFICATE_P12 -k $KEY_CHAIN -P '${{ env.DECODE_PASSWORD }}' -T /usr/bin/codesign;
          security import $CERTIFICATE_APPLICATION_P12 -k $KEY_CHAIN -P '${{ env.DECODE_PASSWORD }}' -T /usr/bin/codesign;
          echo "security find-identity"
          security find-identity -v
          echo "security set-key-partition-list"
          security set-key-partition-list -S apple-tool:,apple:,codesign:, -s -k jenkins $KEY_CHAIN
          rm -fr *.p12

          npm install
          npm run set-target-x64
          npm run release-mac
          rm -Rf ./release/mac
          rm -Rf ./release/mac-unpacked
          rm -Rf ./release/.cache
          rm -Rf ./release/builder-debug.yml
          rm -Rf ./release/builder-effective-config.yaml

          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          rm "./release/Leapp-$TAG_VERSION-mac.zip"
          rm "./release/Leapp-$TAG_VERSION-mac.zip.blockmap"
          zip "./release/Leapp-$TAG_VERSION-mac.zip" "./release/Leapp-$TAG_VERSION.dmg"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Release Draft to S3
        run: |
          cd desktop-app
          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          aws s3 cp ./release/ "${{ env.S3_BUCKET }}/$TAG_VERSION/" --recursive

  publish-draft:
    runs-on: ubuntu-latest
    environment: prod
    needs: [ build-linux, build-win, build-macos-arm, build-macos-x64 ]
    if: needs.tag-validation.outputs.validator == 1
    steps:

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Move Draft to Latest
        run: |
          TAG_VERSION=${GITHUB_REF#refs/*/}
          TAG_VERSION=${TAG_VERSION:1}
          aws s3 rm "${{ env.S3_BUCKET }}/latest" --recursive
          aws s3 cp "${{ env.S3_BUCKET }}/$TAG_VERSION/" "${{ env.S3_BUCKET }}/latest" --recursive

  publish-changelog:
    runs-on: ubuntu-latest
    environment: prod
    needs: [ publish-draft ]
    if: needs.tag-validation.outputs.validator == 1
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Publish Changelog
        run: |
          aws s3 cp CHANGELOG.md "${{ env.S3_BUCKET }}/"
